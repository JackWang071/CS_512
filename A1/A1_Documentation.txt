PREFACE
	Programmer: Jack Wang
	Date Last Modified: 2/6/2018
	Course: CS 433
	Assignment: 1
	PURPOSE
		The purpose of the PCB, PCB_Table, and ReadyQueue programs is to simulate process execution in an OS.
		Each PCB is stored in the PCB_Table. PCBs to be executed are passed to the ReadyQueue, which arranges them in a heap structure by order of priority.
	ASSUMPTIONS
		PCBs are only simulations of actual processes. PCB counters do not point to actual memory addresses.
		A process can be in any of five states, but TERMINATED will not actually be used in this program.
	INSTRUCTIONS
		No special instructions. 

FILE LIST
	SOURCE FILES
		A1_Main.cpp
		PCB.cpp
		PCB_Table.cpp
		ReadyQueue.cpp
	EXECUTABLE
		CS433_A1.exe

FUNCTIONALITY
	A1_Main
		PURPOSE
			Performs Test 1 and Test 2.
		METHODS
			void main():
				Initializes a PCB_Table and ReadyQueue for use in test1() and test2(). 
				Calls test1() and test2() methods.
			void test1(PCB_Table, ReadyQueue):
				Tests if the PCB_Table and ReadyQueue are functioning correctly.
			void test2(PCB_Table, ReadyQueue):
				Tests the performance of the ReadyQueue implementation by randomly inserting or removing a process 1,000,000 times.
	State
		PURPOSE
			Enum that lists the five possible states of a process.
		ELEMENTS
			[0] NEW: Indicates a newly constructed process.
			[1] READY: Indicates that a process has entered the ReadyQueue.
			[2] RUNNING: Indicates that a process has been removed from the ReadyQueue for execution. Only one process can have this state at a time.
			[3] WAITING: Indicates that a process is paused for some purpose (I/O, idling in the PCB table, etc.).
			[4] TERMINATED: Indicates that a process has been completed.
	PCB
		PURPOSE
			Process Control Block; stores and controls access to and manipulation of a process's information, such as ID, priority, state, and program counter.
		VARIABLES
			long ID: Stores the process's ID number
			State state: Stores the process's current 
			int priority: Stores the process's execution priority
			long counter: Stores the starting address of the process's instructions
		METHODS
			PCB(): 
				Initializes all variables at default values (ID, state, and priority as -1, state as State::NEW)
			PCB(long id, int prior, long count): 
				Takes parameters for process's ID, priority, and counter variables
			long getID(): 
				Accessor for process ID
			void setID(long id): 
				Mutator for process ID
			int getPriority(): 
				Accessor for process's priority
			void setPriority(int p): 
				Mutator for process's priority
			long getCounter(): 
				Accessor for process's program counter
			void setCounter(long count): 
				Mutator for process's program counter
			bool canBeReady(): 
				Checks that ID, priority, and counter have valid values
			State getState(): 
				Accessor for process's current state.
			bool setState(State s): 
				Mutator for process's current state, returns false if the process has already been terminated
			string printState(): 
				Prints the process's current state in string form
			void print(): 
				Prints the values of all variables in one line
	PCB_Table
		PURPOSE
			Stores the PCBs of all available processes.
		VARIABLES
			vector<PCB*> table: Stores all inserted PCBs
		METHODS
			PCB_Table(): Default constructor, does nothing.
			bool newProcess(long id, int priority, long counter): 
				Constructs a new PCB with the given parameters and inserts it into the vector table.
				If a process with these parameters already exists, the method returns false.
			PCB* getProcess(long id): 
				Finds and returns the process whose ID matches the parameter
				If no such process exists, the method returns NULL.
			bool endProcess(long id): 
				Finds and terminates the process whose ID matches the parameter.
				If no such process exists, the method returns false.
	ReadyQueue
		PURPOSE
			Heap structure that arranges inserted processes in order of execution priority.
		VARIABLES
			vector<PCB*> Queue: Stores all inserted PCBs
			PCB* runningProcess: Stores the currently running process, of which there can only be one.
		METHODS
			ReadyQueue(): 
				Initializes runningProcess as NULL.
			PCB* removeHighestProc():
				Removes and returns the process at the head of the ReadyQueue.
			bool insertProc(PCB* p):
				Inserts a process p into the ReadyQueue, sets p's state to READY, and arranges p in the proper position in the heap.
			int size():
				Returns the number of processes in the ReadyQueue.
			void displayQueue():
				Displays all processes stored in the ReadyQueue in approximate order of priority.

RESULTS
	